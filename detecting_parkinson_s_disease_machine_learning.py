# -*- coding: utf-8 -*-
"""detecting-parkinson-s-disease-machine-learning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19VJXTSuBhIJB0c68dwm-EQUpuS64WeJ7
"""

#  install necessary packages ( install first time only )
# !pip install numpy pandas sklearn xgboost --upgrade

"""* Install Necessary packages here

# Data Collection
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sb

from imblearn.over_sampling import RandomOverSampler
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, MinMaxScaler
from sklearn.feature_selection import SelectKBest, chi2
from tqdm.notebook import tqdm
from sklearn import metrics
from sklearn.svm import SVC
from xgboost import XGBClassifier
from sklearn.linear_model import LogisticRegression

import warnings
warnings.filterwarnings('ignore')

#  let’s read the data into a DataFrame

df = pd.read_csv('/content/parkinsons.data')
df.tail() # shows the last 5 rows

# head() <= Use for first 5 rows

# descrive the data

df.describe()

#  To know how many rows and cols and NA values

df.info()

"""- we can see here there are 135 records and 24 columns available in this dataset"""

#  shape of the dataset

df.shape

"""# Feature Enginiearing

"""

#  get the all features except "status"

features = df.loc[:, df.columns != 'status'].values[:, 1:] # values use for array format



# get status values in array format

labels = df.loc[:, 'status'].values

# to know how many values for 1 and how many for 0 labeled status

df['status'].value_counts()

#  import MinMaxScaler class from sklearn.preprocessing

from sklearn.preprocessing import MinMaxScaler

#  Initialize MinMax Scaler classs for -1 to 1

scaler = MinMaxScaler((-1, 1))

# fit_transform() method fits to the data and
# then transforms it.

X = scaler.fit_transform(features)
y = labels

#  Show X and y  here
# print(X, y)

#  import train_test_split from sklearn.

from sklearn.model_selection import train_test_split

# split the dataset into training and testing sets with 20% of testings

x_train, x_test, y_train, y_test=train_test_split(X, y, test_size=0.15)

"""# Model Training

"""

# Load an XGBClassifier and train the model

from xgboost import XGBClassifier
from sklearn.metrics import accuracy_score

# make a instance and fitting the model

model = XGBClassifier()
model.fit(x_train, y_train) # fit with x and y train

"""# Model Prediction

"""

#  Finnaly pridict the model

y_prediction = model.predict(x_test)

print("Accuracy Score is", accuracy_score(y_test, y_prediction) * 100)

"""# Summary

<p>
In this Python machine learning project, we learned to detect the presence of Parkinson’s Disease in individuals using various factors. We used an XGBClassifier for this and made use of the sklearn library to prepare the dataset. This gives us an accuracy of <b> 96.66%</b>, which is great considering the number of lines of code in this python project.
</p>
"""

